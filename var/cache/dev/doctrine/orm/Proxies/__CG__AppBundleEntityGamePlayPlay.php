<?php

namespace Proxies\__CG__\AppBundle\Entity\Game\Play;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Play extends \AppBundle\Entity\Game\Play\Play implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'game', 'players', 'turns', 'stage', 'id', 'createdBy', 'updatedBy', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'game', 'players', 'turns', 'stage', 'id', 'createdBy', 'updatedBy', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Play $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getGame(): \AppBundle\Entity\Game\Game
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGame', []);

        return parent::getGame();
    }

    /**
     * {@inheritDoc}
     */
    public function setGame(\AppBundle\Entity\Game\Game $game = NULL): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGame', [$game]);

        return parent::setGame($game);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayers', []);

        return parent::getPlayers();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlayers($players): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlayers', [$players]);

        return parent::setPlayers($players);
    }

    /**
     * {@inheritDoc}
     */
    public function addPlayer(\AppBundle\Entity\Game\Play\Player\Player $player): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPlayer', [$player]);

        return parent::addPlayer($player);
    }

    /**
     * {@inheritDoc}
     */
    public function removePlayer(\AppBundle\Entity\Game\Play\Player\Player $player): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePlayer', [$player]);

        return parent::removePlayer($player);
    }

    /**
     * {@inheritDoc}
     */
    public function getTurns(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTurns', []);

        return parent::getTurns();
    }

    /**
     * {@inheritDoc}
     */
    public function addTurn(\AppBundle\Entity\Game\Play\Turn\Turn $turn): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTurn', [$turn]);

        return parent::addTurn($turn);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTurn(\AppBundle\Entity\Game\Play\Turn\Turn $turn): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTurn', [$turn]);

        return parent::removeTurn($turn);
    }

    /**
     * {@inheritDoc}
     */
    public function getStage(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStage', []);

        return parent::getStage();
    }

    /**
     * {@inheritDoc}
     */
    public function setStage(int $stage): \AppBundle\Entity\Game\Play\Play
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStage', [$stage]);

        return parent::setStage($stage);
    }

    /**
     * {@inheritDoc}
     */
    public function isStarted(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isStarted', []);

        return parent::isStarted();
    }

    /**
     * {@inheritDoc}
     */
    public function isInProgress(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInProgress', []);

        return parent::isInProgress();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnded(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnded', []);

        return parent::isEnded();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

}
